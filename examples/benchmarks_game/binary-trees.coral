# Binary Trees
type Tree = struct { :Ptr[Tree]; :Ptr[Tree] }

func tree(depth):
  if depth = 0:
     return Tree(null, null)
  else:
     return Tree(tree(depth - 1), tree(depth - 1))

func check(t):
  if t[0] = null:
     return i32 1
  else:
     return check(t[0]) + 1 + check(t[1])

let n = try { i32 (sys.args[1]) } catch { 10 }
let min_depth = 4
let n = max(6, n)

print $"stretch tree of depth {n + 1}\t check: {check(tree(n + 1))}"
let max_tree = tree n

for depth in range(min_depth, n + 1):
   let c = 0
   for i in range 2 ** (max_depth - 2 * (depth - min_depth)):
      set c += check(tree depth)
   print $"{count}\t trees of depth {depth}\t check: {c}"

print $"long lived tree of depth {n}\t check: {check max_tree}"
