* DONE Type inference on functions
  We need to apply all the constraints to the AST tree.
  Easiest way is probably to make all the nodes mutable
** DONE Reimplement type_resolver
** DONE Remove Type_graph_v1
* TODO Imports
* TODO Prelude-based operators and c compat
* TODO Implement Anonymous Tuples / lists
  #+BEGIN_SRC
  let p = (1, 2.0, "foobar")
  #+END_SRC

* [3/4] Named Tuples
  #+BEGIN_SRC
  type Pt = {x: Float64, y:Float64}
  let p = Pt(10.0, 20.0)
  let q = Pt(x=10.0, y=20.0)
  let x = p.x
  let y = q.y
  #+END_SRC
** DONE named tuple declaration
** DONE named tuple constructor
** TODO named tuple constructor (keywords)
   ~let x = Point3(1, 2, 3)~
   ~let x = Point3(x=1, z=3, y=2)~
** DONE named tuple field access
* [0/3] Named Unions
  #+BEGIN_SRC
  type Day = {WeekDay: Int8 + Saturday + Sunday}
  let p = Day.Saturday
  let q = Day.Sunday
  let v = match p:
    Weekday(n): n
    Saturday: 6
    Sunday: 7
  #+END_SRC
** TODO syntax for union declaration
** TODO syntax for union case-constructors
** TODO syntax for match expressions
* [0/4] Arrays
** TODO Declare a sized and typed array
** TODO Extract item from array
** TODO Insert item into array
** TODO Pass by reference or value
* [0/3] Pointers
** TODO Declare a type of pointer-to-x
** TODO ~addrof : T -> Ptr[T]~: take an address of a variable
** TODO ~deref  : Ptr[T] -> T~: take the value of a pointer
** TODO Pointer addition and subtraction
** TODO size_t and ptrdiff_t stuff
* TODO Anonymous Unions
  #+BEGIN_SRC
  let p : {Int32 | String} = if rand_bool () { 1 } else { "zero" }
  p + 3 # TypeError: (p:Int32|String) + Int32
  let result = match p:
    (n:Int32): n + 3
    (n:String): int s + 3
  #+END_SRC
* [1/1] Implement Overloaded functions on types
  #+BEGIN_SRC
  let p = Pt(3.0, 4.0)
  let s = "asdf"
  length s
  length p
  #+END_SRC
** DONE Step 2: Implement with Union-based parameter type inference

* Project: PCRE-based regex library
Flesh out some required features by creating a library that wraps libpcre2
** [[Pointer Types]]
