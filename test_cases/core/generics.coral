# A generic struct
type vector3[T] = {x:T, y:T, z:T}
func length2 (v:vector3): v.x * v.x + v.y * v.y + v.z * v.z
func length  (v:vector3): sqrt (length2 v)

let v = vector3(1.0, 1.0, 1.0)
print (length2 v)
let u = vector3(1, 2, 3)
print (length2 u)

# An ad-hoc polymorphic function
func abs (x:Int32): _llvmbuild("abs", x)
func abs (x:Float64): _llvmbuild("fabs", x)

# A parametrically polymorphic function (with constraints)
func dubl (x): x + x
func pdub (x): x + abs x

printf("dubl %d\n", dubl 100)
printf("dubl %f\n", dubl 3.5)
printf("pdub %d\n", pdub 100)
printf("pdub %f\n", pdub 3.5)
